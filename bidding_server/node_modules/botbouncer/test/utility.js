'use strict';

var util = require('../lib/utility'), 
    expect = require("chai").expect, 
    lo = require('lodash');

describe('utility', function(){

    describe('isNumeric', function(){
        var pass = [
                '-1.1',
                '1.1',
                123456789.123456789,
                '123456789.123456789',
                '-123456789.123456789',
                '-1e+35',
                '-1.33333e+35',
                '-9999999999999999999999999999999999.0',
                '-9999999999999999999999999999999999',
                -99999999999999999999999999999999999.0,
                -99999999999999999999999999999999999,
                '-200000000000000000000',
                -2000000000000000000000,
                -20000000.000000000000,
                '-20000000.000000000000',
                '-20000000',
                -20000000,
                '-1.0',
                -1.0,
                -1,
                '-1',
                0,
                '0',
                -0,
                +0,
                0x001,
                0xCCC,
                1,
                '1',
                1.0,
                1.1,
                '1.0',
                20000000, 
                '20000000',
                2000000000000000000000,
                2000000000000000000000.0000000000,
                '200000000000000000000',
                '200000000000000000000.0000000000',
                99999999999999999999999999999999999,
                99999999999999999999999999999999999.0,
                '9999999999999999999999999999999999',
                '9999999999999999999999999999999999.0',
                '1e+35',
                '1.33333e+35',
            ],      
            fail = [
            NaN,
            undefined,
            null,
            false,
            true,
            {},
            [],
            function(){},
            '',
            'asdf',
            '12a',
            '12A',
            'abc'
        ];

        lo.forEach(pass, function(x){
            it('should pass ' + x, function(done){
                expect(util.isNumeric(x)).to.equal(true);
                done();
            });
        });
        lo.forEach(fail, function(x){
            it('should fail ' + x, function(done){
                expect(util.isNumeric(x)).to.equal(false);
                done();
            });
        });
    });

    describe('isInteger', function(){
        var pass = [
                '-1e+35',
                '-1.33333e+35',
                '-9999999999999999999999999999999999.0',
                '-9999999999999999999999999999999999',
                -99999999999999999999999999999999999.0,
                -99999999999999999999999999999999999,
                '-200000000000000000000',
                -2000000000000000000000,
                -20000000.000000000000,
                '-20000000.000000000000',
                '-20000000',
                -20000000,
                '-1.0',
                -1.,
                -1.0,
                -1,
                '-1',
                0,
                '0',
                -0,
                +0,
                1,
                '1',
                1.0,
                1.,
                '1.0',
                20000000, 
                '20000000',
                2000000000000000000000,
                2000000000000000000000.0000000000,
                '200000000000000000000',
                '200000000000000000000.0000000000',
                99999999999999999999999999999999999,
                99999999999999999999999999999999999.0,
                '9999999999999999999999999999999999',
                '9999999999999999999999999999999999.0',
                '1e+35',
                '1.33333e+35',
            ],      
            fail = [
            NaN,
            undefined,
            null,
            false,
            true,
            {},
            [],
            function(){},
            '',
            'asdf',
            '-1.1',
            1.1,
            '1.1',
            '-1..',
            '1..',
            123456789.123456789,
            '123456789.123456789',
            '-123456789.123456789',
            '1e10000'
        ];

        lo.forEach(pass, function(x){
            it('should pass ' + x, function(done){
                expect(util.isInteger(x)).to.equal(true);
                done();
            });
        });
        lo.forEach(fail, function(x){
            it('should fail ' + x, function(done){
                expect(util.isInteger(x)).to.equal(false);
                done();
            });
        });
    });

    describe('isPositiveInteger', function(){
        var pass = [
                1,
                '1',
                1.0,
                '1.0',
                20000000, 
                '20000000',
                2000000000000000000000,
                2000000000000000000000.0000000000,
                '200000000000000000000',
                '200000000000000000000.0000000000',
                99999999999999999999999999999999999,
                99999999999999999999999999999999999.0,
                '9999999999999999999999999999999999',
                '9999999999999999999999999999999999.0',
                '1e+35',
                '1.33333e+35',
            ],      
            fail = [
            NaN,
            undefined,
            null,
            false,
            true,
            {},
            [],
            function(){},
            '',
            'asdf',
            '-1.1',
            1.1,
            '1.1',
            123456789.123456789,
            '123456789.123456789',
            '-123456789.123456789',
            '1e10000',
            '-1e+35',
            '-1.33333e+35',
            '-9999999999999999999999999999999999.0',
            '-9999999999999999999999999999999999',
            -99999999999999999999999999999999999.0,
            -99999999999999999999999999999999999,
            '-200000000000000000000',
            -2000000000000000000000,
            -20000000.000000000000,
            '-20000000.000000000000',
            '-20000000',
            -20000000,
            '-1.0',
            -1.0,
            -1,
            '-1',
            0,
            '0',
            -0,
            +0,
        ];

        lo.forEach(pass, function(x){
            it('should pass ' + x, function(done){
                expect(util.isPositiveInteger(x)).to.equal(true);
                done();
            });
        });
        lo.forEach(fail, function(x){
            it('should fail ' + x, function(done){
                expect(util.isPositiveInteger(x)).to.equal(false);
                done();
            });
        });
    });

    describe('isPositiveIntegerOrZero', function(){
        var pass = [
                0,
                '0',
                -0,
                +0,
                1,
                '1',
                1.0,
                '1.0',
                20000000, 
                '20000000',
                2000000000000000000000,
                2000000000000000000000.0000000000,
                '200000000000000000000',
                '200000000000000000000.0000000000',
                99999999999999999999999999999999999,
                99999999999999999999999999999999999.0,
                '9999999999999999999999999999999999',
                '9999999999999999999999999999999999.0',
                '1e+35',
                '1.33333e+35',
            ],      
            fail = [
            NaN,
            undefined,
            null,
            false,
            true,
            {},
            [],
            function(){},
            '',
            'asdf',
            '-1.1',
            1.1,
            '1.1',
            123456789.123456789,
            '123456789.123456789',
            '-123456789.123456789',
            '1e10000',
            '-1e+35',
            '-1.33333e+35',
            '-9999999999999999999999999999999999.0',
            '-9999999999999999999999999999999999',
            -99999999999999999999999999999999999.0,
            -99999999999999999999999999999999999,
            '-200000000000000000000',
            -2000000000000000000000,
            -20000000.000000000000,
            '-20000000.000000000000',
            '-20000000',
            -20000000,
            '-1.0',
            -1.0,
            -1,
            '-1'
        ];

        lo.forEach(pass, function(x){
            it('should pass ' + x, function(done){
                expect(util.isPositiveIntegerOrZero(x)).to.equal(true);
                done();
            });
        });
        lo.forEach(fail, function(x){
            it('should fail ' + x, function(done){
                expect(util.isPositiveIntegerOrZero(x)).to.equal(false);
                done();
            });
        });
    });
});
